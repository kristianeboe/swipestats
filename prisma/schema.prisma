// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// cool planetscale guide 1: https://davidparks.dev/blog/planetscale-deployment-with-prisma/
// cool planetscale guide 2:

generator client {
  provider = "prisma-client-js"
  // mysql
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  // mysql
  // provider             = "mysql"
  // url                  = env("PLANETSCALE_URL_LOCAL")
  // shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  // referentialIntegrity = "prisma"
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")

}

model User {
  // id String @id @default(uuid())
  id            Int            @id @default(autoincrement())
  tinderProfile TinderProfile? // a user could actually have multiple profiles...

  dataFiles OriginalAnonymizedFile[]
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
}

model TinderProfile {
  tinderId            String   @id
  // tinderUser
  birthDate           DateTime
  createDate          DateTime
  gender              String // probably an enum
  bio                 String?
  city                String?
  region              String?
  instagram           Boolean
  spotify             Boolean
  jobs                Json? // title, company
  schools             Json? // displayed, name
  user_interests      Json? // Should probably be enum
  sexual_orientations Json? // Should probably be enum


  // usage
  appOpens         Json
  matches          Json
  swipeLikes       Json
  swipePasses      Json
  messagesSent     Json
  messagesReceived Json
  messagesId       String      @unique // same as tinderId
  messagesRaw      MessagesRaw @relation(fields: [messagesId], references: [id])
  // meta calculated during creation
  messagesMeta     Json
  // relation
  userId           Int         @unique
  user             User        @relation(fields: [userId], references: [id])

  custdomDataId String?     @unique // same as tinderId
  customData    CustomData? @relation(fields: [custdomDataId], references: [id])
}

model MessagesRaw {
  id            String          @id
  messages      Json
  TinderProfile TinderProfile[]
}

model CustomData {
  id String @id

  phoneNumbersExchanged Int?
  dateArranged          Int?
  dateAttended          Int?
  dateCreepy            Int?
  dateNoSpark           Int?
  multipleDates         Int?
  sleptWithFirstDate    Int?
  sleptWithEventually   Int?
  relationshipsStarted  Int?
  cohabitation          Int?
  married               Int?

  premiumSubscriptionPeriods Json[]

  // dataProvider?

  TinderProfile TinderProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OriginalAnonymizedFile {
  // id       String    @id @default(uuid())
  id           Int          @id @default(autoincrement())
  dataProvider DataProvider
  file         Json

  userId    Int
  User      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

// Non user related
model Waitlist {
  id           Int          @id @default(autoincrement())
  email        String       @db.VarChar(255)
  dataProvider DataProvider
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// Utils
enum DataProvider {
  OLD_SWIPESTATS
  TINDER
  HINGE
  BUMBLE
}
